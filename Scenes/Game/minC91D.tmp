[gd_scene load_steps=6 format=3 uid="uid://dk02p7itik21n"]

[ext_resource type="Shader" path="res://Scenes/perspective.gdshader" id="1_m7cqe"]
[ext_resource type="Texture2D" uid="uid://bvyoddievw80l" path="res://Graphics/mine.png" id="2_tuut6"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_3fsc7"]
shader = ExtResource("1_m7cqe")
shader_parameter/fov = 90.0
shader_parameter/cull_back = true
shader_parameter/y_rot = 0.0
shader_parameter/x_rot = 39.0
shader_parameter/inset = 0.0

[sub_resource type="GDScript" id="GDScript_etv8o"]
script/source = "extends Sprite2D;

@onready var grid_container: GridContainer = $GridContainer;
@onready var audio_stream_player_2d: AudioStreamPlayer2D = $AudioStreamPlayer2D;
@onready var drag_rect: Control = $DragRect;

var item_list : Array[Sprite2D] = [];
var x_rot : float = 0 : 
	set(value) : 
		self.material.set_shader_parameter(\"x_rot\", value);
		x_rot = value;
@export var item_texture : Texture2D = preload(\"res://Graphics/Item/raw_iron.png\");

var item_count : int = 0 : 
	set(value) : 
		item_count = value;
	get : 
		return item_count;

var dragging : bool = false;
func _ready() -> void:
	for i : int in round(8) : 
		var c : Control = Control.new();
		c.size_flags_horizontal = Control.SIZE_EXPAND_FILL;
		c.size_flags_vertical= Control.SIZE_EXPAND_FILL;
		grid_container.add_child(c);
		var spr : Sprite2D = Sprite2D.new();
		spr.texture = item_texture;
		spr.visible = true;
		c.add_child(spr);
		item_list.append(spr);
	reset_itemslot();
	
	DragManager.drag_starting.connect(func(event : InputEvent) : 
		if (drag_rect.get_global_rect().has_point(event.global_position) && item_count > 0) : 
			var spr : Sprite2D = Sprite2D.new();
			spr.texture = item_texture;
			spr.scale = Vector2.ONE * 4;
			DragManager.start_drag(spr, null);
			dragging = true;
			remove_item();
	);
	DragManager.drag_endding.connect(func() : 
		if (dragging) : 
			append_item();
			#set_item_count(item_count + 1);
			dragging = false;
	);

const SOUND : Array[AudioStream] = [
	preload(\"res://Audio/Sound/Equip_iron1.ogg\"),
];

func set_item_count(value : int) : 
	if (item_count > -1 && item_count < item_list.size()) : 
		item_count = value;
		reset_itemslot();

func append_item() : 
	var shader_material : ShaderMaterial = self.material;
	x_rot = 39;
	var tween : Tween = get_tree().create_tween().set_parallel(true);
	tween.tween_property(self, \"x_rot\", 39+5, 0.05);
	tween.tween_property(self, \"offset:y\", 7, 0.075);
	tween.chain();
	tween.tween_property(self, \"x_rot\", 39, 0.05);
	tween.tween_property(self, \"offset:y\", 0, 0.075);
	tween.chain();
	
	if (!audio_stream_player_2d.playing) : 
		audio_stream_player_2d.play();
	var audio_playback : AudioStreamPlayback = audio_stream_player_2d.get_stream_playback();
	audio_playback.play_stream(SOUND[randi() % SOUND.size()]);
	reset_itemslot();

func remove_item() : 
	if (item_count > 0 && item_count <= item_list.size()) : 
		item_count -= 1;
		var item : Sprite2D = item_list[item_count];
		var tween : Tween = get_tree().create_tween();
		tween.tween_property(item, \"scale\", Vector2.ZERO, 0.1);
		tween.tween_property(item, \"modulate:a\", 0.0, 0.1);
		await tween.finished;
		item_list[item_count].visible = false;
		item.visible = true;

func reset_itemslot() : 
	var item : Sprite2D;
	if (item_count > -1 && item_count < item_list.size()) : 
		for u : int in round(item_list.size()) : 
		item = item_list[i];
		item.visible = (i < item_count);
		item.scale = Vector2.ONE;
		item.modulate = Color.WHITE;
"

[sub_resource type="AudioStreamPolyphonic" id="AudioStreamPolyphonic_ypj62"]

[node name="Mine" type="Sprite2D"]
material = SubResource("ShaderMaterial_3fsc7")
texture = ExtResource("2_tuut6")
script = SubResource("GDScript_etv8o")
item_texture = null

[node name="GridContainer" type="GridContainer" parent="."]
anchors_preset = -1
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -192.5
offset_top = -263.5
offset_right = -159.5
offset_bottom = -235.5
grow_horizontal = 2
grow_vertical = 2
scale = Vector2(5, 5)
columns = 2

[node name="AudioStreamPlayer2D" type="AudioStreamPlayer2D" parent="."]
stream = SubResource("AudioStreamPolyphonic_ypj62")

[node name="DragRect" type="Control" parent="."]
layout_mode = 3
anchors_preset = 0
offset_left = -74.0
offset_top = -75.0
offset_right = 74.0
offset_bottom = 113.0
